#user                           nginx; # Run as nginx user
worker_processes                auto;

pid                             /run/nginx.pid;

events {
        worker_connections      1024;
}

http {
        # Disable logging
        access_log              /dev/null;
        error_log               /dev/null;

        default_type            application/octet-stream;
        ignore_invalid_headers  on;
        sendfile                on;
	server_tokens           off; # Hide version number in error pages
        tcp_nopush              on;
        tcp_nodelay             on;
        keepalive_timeout       65;
        types_hash_max_size     2048;

        include                 /etc/nginx/conf.d/*.conf;
        include                 /etc/nginx/mime.types;

        # Proxy perf tweaks
        proxy_buffering              on;
        proxy_buffers                16 64k;
        proxy_buffer_size            64k;
        proxy_busy_buffers_size      512k;
        proxy_max_temp_file_size     2048k;
        proxy_temp_file_write_size   64k;
        proxy_temp_path              "/tmp";

        # Compression options
        gzip                    on;
        gzip_buffers            4 32k; # Set the buffer size of gzip, 4 32k is good enough for almost everybody. (Well, according to the tutorial I copied this line from...)
        gzip_proxied            any; # Allows compressed responses for any request even from proxies
        gzip_types              text/html
                                text/css
                                text/xml
                                application/javascript
                                application/atom+xml
                                application/rss+xml
                                text/plain
                                application/font-woff
                                application/json
                                application/pdf
                                application/x-x509-ca-cert
                                application/xhtml+xml
                                application/xspf+xml; # Here I just copied in all of the MIME types that looked compressible from /etc/nginx/mime.types (leaving out ones I will clearly never use)
        gzip_vary               on; # Enables response header of "Vary: Accept-Encoding

# Substitution filters
  subs_filter \bhttps://forum.cryptopartynewcastle.org\b http://cryptofxxpxdnelv.onion ri;            # For inline links to the HTTPS site
  subs_filter \bhttp://forum.cryptopartynewcastle.org\b http://cryptofxxpxdnelv.onion ri;             # Some image embeds seem to be HTTP for whatever reason
  subs_filter \bforum.cryptopartynewcastle.org/uploads\b cryptofxxpxdnelv.onion/uploads ri;           # This one is what most image links go down as
  subs_filter \bforum.cryptopartynewcastle.org/user_avatar\b cryptofxxpxdnelv.onion/user_avatar ri;   # Avatars
  subs_filter \b=forum.cryptopartynewcastle.org\b =cryptofxxpxdnelv.onion ri;                         # This weird construct appears once in the link to the main CSS sheet

# Fix cookie domain
  proxy_cookie_domain forum.cryptopartynewcastle.org cryptofxxpxdnelv.onion;

# Fix header-redirects
  proxy_redirect ~*^(.*?)\bforum\.cryptopartynewcastle\.org\b(.*)$ $1cryptofxxpxdnelv.onion$2;

# o2d_lookup -> if cannot remap, return input.
##init_by_lua_block {
##  slog = function (s) -- in case of manual debugging
##    ngx.log(ngx.ERR, "\n<<", s, ">>\n")
##    return
##  end
##
##  o2d_mappings = {}
##  o2d_mappings["cryptofxxpxdnelv.onion"] = "forum.cryptopartynewcastle.org"
##
##  o2d_lookup = function (o)
##    return ( o2d_mappings[o[1]] or o[1] )
##  end
##
##  onion2dns = function (i)
##    if i == nil then
##      return nil
##    end
##    local o, num, errs = ngx.re.gsub(i, "\\b([a-z2-7]{16}\\.onion)\\b", o2d_lookup, "io")
##    return o
##  end
##
##  dns2onion = function (i) -- inherently a bit flaky because ordering, boundaries; avoid
##    local num, errs
##    i, num, errs = ngx.re.gsub(i, "\\b(forum\\.cryptopartynewcastle\\.org)\\b", "cryptofxxpxdnelv.onion", "io")
##    return i
##  end
##}

# Site to host as onion service
  server {
        listen                  unix:/tmp/nginx-listen.sock; # Listen on a Unix socket (non-SSL)

        # Allow only Unix socket connections
        allow "unix:";
        deny all;

        location / {
        proxy_pass              http://10.10.1.70/; # If you set this to a hostname instead of IP, you might need to specify a DNS server with the 'resolver' directive.
        proxy_read_timeout      90;

        # These directives define the headers that will be passed from the CLIENT to the SERVER.
        ## Here we just lie to the server and pretend the client is requesting the clearnet site.
        ## As a bonus, this will protect you from any leaks that might otherwise be exhibited by your remote server
        ## if the client sends us a maliciously-crafted Host header that reads either "localhost" or "127.0.0.1".
        proxy_set_header        Host "forum.cryptopartynewcastle.org";

        # These directives define the headers that will be ignored and not passed from SERVER to CLIENT
        proxy_hide_header       Cache-Control;
        proxy_hide_header       Content-Security-Policy;
        proxy_hide_header       Content-Security-Policy-Report-Only;
        proxy_hide_header       Public-Key-Pins;
        proxy_hide_header       Public-Key-Pins-Report-Only;
        proxy_hide_header       Referrer-Policy;
        proxy_hide_header       Strict-Transport-Security;
        proxy_hide_header       X-Content-Type-Options;
        proxy_hide_header       X-Frame-Options;
        proxy_hide_header       X-XSS-Protection;
      }

      # Deny special location blocks
      location = /install.php   { return 404; }
      location = /server-status { return 404; }
      location = /.htaccess     { return 404; }
      location /.git            { return 404; }
      location /admin           { return 404; }
      location /wp-admin        { return 404; }
      location /wp-login        { return 404; }

      # Manage added headers
      add_header                X-Frame-Options "SAMEORIGIN";
      add_header                X-Content-Type-Options nosniff;
      add_header                X-XSS-Protection "1; mode=block";
      add_header                Cache-Control "public";
      add_header                Referrer-Policy "no-referrer"; # Only supported from Firefox 52+, but we can now control referrer behaviour with a HTTP header

      # Purge some headers that reveal too much
      more_clear_headers        "Age";
      more_clear_headers        "Server";
      more_clear_headers        "Via";
      more_clear_headers        "X-From-Nginx";
      more_clear_headers        "X-NA";
      more_clear_headers        "X-Powered-By";
      more_clear_headers        "X-Request-Id";
      more_clear_headers        "X-Runtime";
      more_clear_headers        "X-Varnish";
  }
}
